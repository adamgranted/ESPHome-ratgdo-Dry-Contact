# +++++++++++++++++ Configuration +++++++++++++++++
esphome:
  name: garage-door-opener
  friendly_name: Garage Door Opener
  ## ---------- Initial door state setting on boot
  on_boot:
    priority: 500
    then:
      - if:
          condition:
            - binary_sensor.is_on: close_endstop_binary_sensor
          then:
            - cover.template.publish:
                id: garage_door
                state: CLOSED
      - if:
          condition:
            - binary_sensor.is_on: open_endstop_binary_sensor
          then:
            - cover.template.publish:
                id: garage_door
                state: OPEN
      - if:
          condition:
            - binary_sensor.is_off: close_endstop_binary_sensor
            - binary_sensor.is_off: open_endstop_binary_sensor
          then:
            - cover.template.publish:
                id: garage_door
                state: OPEN

esp8266:
  board: nodemcuv2

# Enable logging
logger:
  level: WARN  # Set to WARN to reduce logging

# Enable Home Assistant API
api:
  encryption:
    key: ""

ota:
  - platform: esphome
    password: ""

wifi:
  ssid: ""
  password: ""
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ""
    password: ""

captive_portal:

# +++++++++++++++++ Globals +++++++++++++++++
globals:
  - id: obstruction_state
    type: bool
    initial_value: 'false'
  - id: obstruction_low_count
    type: int
    initial_value: '0'
  - id: last_millis
    type: unsigned long
    initial_value: '0'
  - id: last_obstruction_high
    type: unsigned long
    initial_value: '0'
  - id: obstruction_sensor_detected
    type: bool
    initial_value: 'true'

# +++++++++++++++++ Intervals +++++++++++++++++
interval:
  # ## ---------- Debug Interval
  # - interval: 1s
  #   then:
  #     - lambda: |-
  #         bool close_sensor_state = digitalRead(D6);
  #         bool open_sensor_state = digitalRead(D5);
  #         ESP_LOGD("main", "Closed State is ACTUALLY: %s", close_sensor_state ? "ON" : "OFF");
  #         ESP_LOGD("main", "Open State is ACTUALLY: %s", open_sensor_state ? "ON" : "OFF");

  ## ---------- Obstruction Detection Loop
  - interval: 50ms
    then:
      - lambda: |-
          if (!id(obstruction_sensor_detected)) return;
          long current_millis = millis();
          static unsigned long lastMillis = 0;

          // the obstruction sensor has 3 states: clear (HIGH with LOW pulse every 7ms), obstructed (HIGH), asleep (LOW)
          // the transitions between awake and asleep are tricky because the voltage drops slowly when falling asleep
          // and is high without pulses when waking up

          // If at least 3 low pulses are counted within 50ms, the door is awake, not obstructed and we don't have to check anything else

          // Every 50ms
          if(current_millis - lastMillis > 50){
              // check to see if we got between 3 and 8 low pulses on the line
              if(id(obstruction_low_count) >= 3 && id(obstruction_low_count) <= 8){
                  id(obstruction_state) = true;  // Door is awake, not obstructed

              // if there have been no pulses the line is steady high or low			
              } else if(id(obstruction_low_count) == 0){
                  // if the line is high and the last high pulse was more than 400ms ago, then there is an obstruction present. 
                  if(digitalRead(D7) && current_millis - id(last_obstruction_high) > 400){
                      id(obstruction_state) = false;  // Obstruction present
                  } else {
                      // asleep
                  }
              }

              lastMillis = current_millis;
              id(obstruction_low_count) = 0;
          }



# +++++++++++++++++ Switches +++++++++++++++++
switch:
  - platform: template
    name: "Virtual Lock"
    id: virtual_lock
    optimistic: true
  - platform: gpio
    pin: D1
    name: "Door relay"
    id: door_relay
    internal: true
    on_turn_on:
    - delay: 250ms
    - switch.turn_off: door_relay

# +++++++++++++++++ Sensors +++++++++++++++++
sensor:
  - platform: wifi_signal
    name: "WiFi Signal"
    update_interval: 60s    

# +++++++++++++++++ Binary Sensors +++++++++++++++++
binary_sensor:
  ## ---------- Obstruction Input
  - platform: gpio
    pin: D7
    name: "Obstruction Sensor"
    id: obstruction_sensor
    internal: true  # Make sensor internal to avoid Home Assistant logs
    on_press:
      then:
        - lambda: |-
            id(obstruction_low_count) += 1;
            id(last_obstruction_high) = millis();  // Update last high pulse time

    on_release:
      then:
        - lambda: |-
            id(obstruction_low_count) += 1;
            id(last_obstruction_high) = millis();  // Update last high pulse time
  
  ## ---------- Obstruction Detected (to HA)
  - platform: template
    name: "Obstruction"
    device_class: occupancy
    lambda: |-
      return !id(obstruction_state);

  ## ---------- Close Sensor
  - platform: gpio 
    pin:
      number: D6
      inverted: false
      mode:
        input: true
        pullup: true
    name: "Garage Door Close Sensor"
    id: close_endstop_binary_sensor
    filters:
      - delayed_off: 1000ms
      - delayed_off: 1000ms
    internal: true
    on_press:
      then:
        - cover.template.publish:
            id: garage_door
            state: CLOSED
            current_operation: IDLE
        - logger.log: "Close sensor on state"

  ## ---------- Open Sensor
  - platform: gpio
    pin:
      number: D5
      inverted: false
      mode:
        input: true
        pullup: true
    name: "Garage Door Open Sensor"
    id: open_endstop_binary_sensor
    filters:
      - delayed_off: 1000ms
      - delayed_off: 1000ms
    internal: true
    on_press:
      then:
        - cover.template.publish:
            id: garage_door
            state: OPEN
            current_operation: IDLE
        - logger.log: "Open sensor on state"


# +++++++++++++++++ Cover Component +++++++++++++++++    
cover:
  - platform: template
    id: garage_door
    name: "Garage Door"
    device_class: garage
    open_action:
      - if:
          condition:
            - and:
              - switch.is_off: virtual_lock
              - binary_sensor.is_on: close_endstop_binary_sensor
          then: 
            - switch.turn_on: door_relay
            - cover.template.publish:
                id: garage_door
                current_operation: OPENING
    close_action:
      - if:
          condition:
            - and:
              - switch.is_off: virtual_lock
              - binary_sensor.is_on: open_endstop_binary_sensor
          then: 
            - switch.turn_on: door_relay
            - cover.template.publish:
                id: garage_door
                current_operation: CLOSING
             
    stop_action:
      - if:
           condition:
             - and:
               - switch.is_off: virtual_lock
           then: 
             - switch.turn_on: door_relay